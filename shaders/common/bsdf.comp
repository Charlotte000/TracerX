bool BSDF(inout Ray ray, inout vec3 throughput, inout vec3 radiance, in CollisionManifold manifold)
{
    Material material = GetMaterial(manifold);

    vec3 specularDir = reflect(ray.Direction, manifold.Normal);
    vec3 diffuseDir = normalize(RandomVector3() + manifold.Normal);

    if (material.Metalness <= RandomValue() && RandomValue() >= 0.2)
    {
        material.Roughness = 1;
    }

    // Fresnel
    if (material.FresnelStrength > 0.0 &&
        1.0 - pow(dot(manifold.Normal, -ray.Direction), material.FresnelStrength) >= RandomValue())
    {
        ray.Origin = manifold.Point;
        ray.Direction = specularDir;

        radiance += material.EmissionColor * throughput;
        throughput *= material.FresnelColor;
        return true;
    }

    // Density
    if (material.Density > 0.0)
    {
        float depth = -log(RandomValue()) / material.Density;
        if (manifold.IsFrontFace || depth >= manifold.Depth)
        {
            return false;
        }

        ray.Origin += ray.Direction * depth;
        ray.Direction = RandomVector3();

        radiance += material.EmissionColor * throughput;
        throughput *= material.AlbedoColor;
        return true;
    }

    // Refract
    if (material.IOR > 0.0)
    {
        vec3 refractedDir = refract(ray.Direction, manifold.Normal, manifold.IsFrontFace ? 1.0 / material.IOR : material.IOR);
        if (refractedDir == vec3(0))
        {
            refractedDir = specularDir;
        }

        ray.Origin = manifold.Point;
        ray.Direction = refractedDir;

        radiance += material.EmissionColor * throughput;
        throughput *= material.AlbedoColor;
        return true;
    }

    // Scatter
    ray.Origin = manifold.Point;
    ray.Direction = Slerp(specularDir, diffuseDir, material.Roughness);

    radiance += material.EmissionColor * throughput;
    throughput *= material.AlbedoColor;
    return true;
}
