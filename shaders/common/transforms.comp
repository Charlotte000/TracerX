vec3 Slerp(in vec3 a, in vec3 b, float t)
{
    float angle = acos(dot(a, b));
    return isnan(angle) || angle == 0 ? b : (sin((1 - t) * angle) * a + sin(t * angle) * b) / sin(angle);
}

vec3 Transform(in vec3 v, in mat4 matrix, in bool translate)
{
    return (matrix * vec4(v, translate ? 1 : 0)).xyz;
}

void JitterRay(inout Ray ray)
{
    // Focal
    vec3 focalPoint = ray.Origin + ray.Direction * Camera.FocalDistance;
    vec2 focal = RandomVector2() * Camera.Aperture;
    ray.Origin += focal.x * CameraRight + focal.y * Camera.Up;
    ray.Direction = normalize(focalPoint - ray.Origin);

    // Blur
    vec2 blur = RandomVector2() * Camera.Blur;
    ray.Origin += blur.x * CameraRight + blur.y * Camera.Up;

    ray.InvDirection = 1 / ray.Direction;
}

vec4 NormalToColor(in vec3 normal)
{
    return vec4((normal + 1) * .5, 1);
}

vec4 DepthToColor(in float depth)
{
    float nonLinear = (1 / depth - 1 / MinRenderDistance) / (1 / MaxRenderDistance - 1 / MinRenderDistance);
    return vec4(vec3(nonLinear), 1);
}
