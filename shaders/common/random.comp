// pcg4d rng algorithm by Moroz Mykhailo (https://www.shadertoy.com/view/wltcRS)
uvec4 Seed = uvec4(TexelCoord.x, TexelCoord.y, SampleCount, TexelCoord.x + TexelCoord.y);

float RandomValue()
{
    Seed = Seed * 1664525u + 1013904223u;
    Seed.x += Seed.y * Seed.w;
    Seed.y += Seed.z * Seed.x;
    Seed.z += Seed.x * Seed.y;
    Seed.w += Seed.y * Seed.z;

    Seed = Seed ^ (Seed >> 16u);
    Seed.x += Seed.y * Seed.w;
    Seed.y += Seed.z * Seed.x;
    Seed.z += Seed.x * Seed.y;
    Seed.w += Seed.y * Seed.z;
    return float(Seed.x) / float(0xffffffffu);
}

float RandomValueNormalDistribution()
{
    float theta = TWO_PI * RandomValue();
    float rho = sqrt(-2.0 * log(RandomValue()));
    return rho * cos(theta);
}

vec2 RandomVector2()
{
    float angle = RandomValue() * TWO_PI;
    return vec2(cos(angle), sin(angle)) * sqrt(RandomValue());
}

vec3 RandomVector3()
{
    float x = RandomValueNormalDistribution();
    float y = RandomValueNormalDistribution();
    float z = RandomValueNormalDistribution();
    return normalize(vec3(x, y, z));
}
