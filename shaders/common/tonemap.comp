vec3 Reinhard(in vec3 color)
{
    return color / (color + 1);
}

vec3 ACES(in vec3 color)
{
    const float a = 2.51;
    const float b = 0.03;
    const float y = 2.43;
    const float d = 0.59;
    const float e = 0.14;

    return clamp((color * (a * color + b)) / (color * (y * color + d) + e), 0, 1);
}

vec3 ACESfitted(in vec3 color)
{
    const mat3 ACESInputMat = mat3
    (
        vec3(0.59719, 0.35458, 0.04823),
        vec3(0.07600, 0.90834, 0.01566),
        vec3(0.02840, 0.13383, 0.83777)
    );

    const mat3 ACESOutputMat = mat3
    (
        vec3(1.60475, -0.53108, -0.07367),
        vec3(-0.10208, 1.10813, -0.00605),
        vec3(-0.00327, -0.07276, 1.07602)
    );

    color = color * ACESInputMat;

    // Apply RRT and ODT
    vec3 a = color * (color + 0.0245786) - 0.000090537;
    vec3 b = color * (0.983729 * color + 0.4329510) + 0.238081;
    color = a / b;

    color = color * ACESOutputMat;

    return clamp(color, 0, 1);
}

vec3 GammaCorrection(in vec3 color, in float gamma)
{
    return pow(color, vec3(1 / gamma));
}

vec4 ToneMap(in vec4 pixel)
{
    switch (ToneMapMode)
    {
        // Reinhard
        case ReinhardToneMap:
            pixel.rgb = Reinhard(pixel.rgb);
            break;

        // ACES
        case ACESToneMap:
            pixel.rgb = ACES(pixel.rgb);
            break;

        // ACES fitted
        case ACESfittedToneMap:
            pixel.rgb = ACESfitted(pixel.rgb);
            break;
    }

    pixel.rgb = GammaCorrection(pixel.rgb, Gamma);
    return pixel;
}
